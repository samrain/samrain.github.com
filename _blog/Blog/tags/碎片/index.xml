<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>碎片 on sam的小窝</title>
    <link>https://www.samrainhan.com/tags/%E7%A2%8E%E7%89%87/</link>
    <description>Recent content in 碎片 on sam的小窝</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 25 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.samrainhan.com/tags/%E7%A2%8E%E7%89%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>整理SqlServer表上索引碎片</title>
      <link>https://www.samrainhan.com/posts/2016-07-25-sort-sqlserver-table-index-fragments/</link>
      <pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://www.samrainhan.com/posts/2016-07-25-sort-sqlserver-table-index-fragments/</guid>
      <description>&lt;h2 id=&#34;查询当前数据库的表上索引碎片情况按照严重程度顺序排列a-idorgheadline28a&#34;&gt;查询当前数据库的表上索引碎片情况，按照严重程度顺序排列&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;USE DBNAME;&#xA;SELECT &#xA;DB_NAME() AS DatbaseName &#xA;, SCHEMA_NAME(o.Schema_ID) AS SchemaName &#xA;, OBJECT_NAME(s.[object_id]) AS TableName &#xA;, i.name AS IndexName &#xA;, ROUND(s.avg_fragmentation_in_percent,2) AS [Fragmentation %] INTO #TempFragmentation&#xA;FROM sys.dm_db_index_physical_stats(db_id(), NULL, NULL, NULL, NULL) s&#xA;INNER JOIN sys.indexes i ON s.[object_id] = i.[object_id] AND s.index_id = i.index_id&#xA;INNER JOIN sys.objects o ON i.object_id = O.object_id;&#xA;&#xA;SELECT * FROM #TempFragmentation ORDER BY [Fragmentation %] DESC;&#xA;&#xA;DROP TABLE #TempFragmentation;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;查询当前数据库的表上从来没有使用过的索引a-idorgheadline29a&#34;&gt;查询当前数据库的表上从来没有使用过的索引&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED &#xA;SELECT &#xA;DB_NAME() AS DatbaseName &#xA;, SCHEMA_NAME(O.Schema_ID) AS SchemaName &#xA;, OBJECT_NAME(I.object_id) AS TableName &#xA;, I.name AS IndexName &#xA;INTO #TempNeverUsedIndexes &#xA;FROM sys.indexes I INNER JOIN sys.objects O ON I.object_id = O.object_id&#xA;&#xA;&#xA;SELECT * FROM #TempNeverUsedIndexes &#xA;ORDER BY DatbaseName, SchemaName, TableName, IndexName&#xA;&#xA;&#xA;DROP TABLE #TempNeverUsedIndexes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;查询当前数据库的表上使用的比较少的索引a-idorgheadline30a&#34;&gt;查询当前数据库的表上使用的比较少的索引&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;&#xA;SELECT &#xA;DB_NAME() AS DatabaseName &#xA;, SCHEMA_NAME(o.Schema_ID) AS SchemaName &#xA;, OBJECT_NAME(s.[object_id]) AS TableName &#xA;, i.name AS IndexName &#xA;, s.user_updates &#xA;, s.system_seeks + s.system_scans + s.system_lookups AS [System USAGE] INTO #TempUnusedIndexes&#xA;FROM sys.dm_db_index_usage_stats s&#xA;INNER JOIN sys.indexes i ON s.[object_id] = i.[object_id] AND s.index_id = i.index_id&#xA;INNER JOIN sys.objects o ON i.object_id = O.object_id ;&#xA;SELECT TOP 20 *&#xA;FROM #TempUnusedIndexes ORDER BY [user_updates] DESC ;&#xA;DROP TABLE #TempUnusedIndexes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;重建索引对于碎片比较厉害的索引效果比重组要好a-idorgheadline31a&#34;&gt;重建索引，对于碎片比较厉害的索引，效果比重组要好&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;ALTER INDEX [INDEX_NAME] ON Table_Name REBUILD PARTITION = ALL WITH ( PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, ONLINE = OFF, SORT_IN_TEMPDB = OFF )&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
